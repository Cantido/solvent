<!-- vim: set syntax=markdown: -->

# Getting Started with Solvent

```elixir
Mix.install([:solvent])
```

## Introduction

Solvent is an event bus. It was designed to be extremely easy to use.
There's no supervision hierarchy to set up, and no configuration required.
You don't even need to `import` or `use` any modules if you don't want to.

## Basic PubSub

At its core, Solvent delivers events to "sinks," which can be one of several kinds of delivery targets.
By default, you can subscribe a function call, a module-function-arguments tuple, or a PID.
Use `Solvent.subscribe/2` to subscribe.
No other arguments are required, but you may want to provide additional filtering.

Then, `Solvent.publish/2` will publish an event.
Running the example below in Livebook will create a subscriber that sends a message back to us, which we then receive and print.
It should print "Hello, world!"

```elixir
{:ok, sub_id} = Solvent.subscribe(self(), types: ["com.example.first"])

{:ok, event_id} = Solvent.publish("com.example.first")

receive do
  {:event, event} -> IO.inspect(event)
end
```

When an event is published, Solvent delivers it to the sinks with subscription details that match.
This all happens in a separate process, so publishing an event is very fast.
Subscriber invocations also happen inside separate processes, so they are completely isolated from one another.

Solvent also sets some Logger metadata for every subscriber process:

* `:solvent_subscriber_id` - the ID of the subscriber being executed
* `:solvent_event_source` - the source of the event that triggered this subscriber
* `:solvent_event_id` - the ID of the event that triggered this subscriber
* `:solvent_event_type` - the type field of the event that triggered this subscriber

To use this metadata, configure `:logger`:

<!-- livebook:{"force_markdown":true} -->

```elixir
config :logger, :console,
  metadata: [
    :solvent_event_type
  ]
```

## Subscriptions

Solvent matches events using [CloudEvents subscriptions](https://github.com/cloudevents/spec/blob/main/subscriptions/spec.md).
When translated to Elixir, these subscriptions match events in three ways:

* with a CloudEvents `source` value
* with a list of `types`
* with a `filters` expression

If a subscription is created with none of these, then all events will match with it,
and your sink will receive every event passing through Solvent.
All three fields must match in order for an event to be delivered.

For example, to match all events from the source `https://github.com/Cantido/solvent` that have either the type `"com.example.one"` or `"com.example.two"`,
and deliver it to the current process, you would do this:

```elixir
{:ok, sub_id} =
  Solvent.subscribe(
    self(),
    source: "https://github.com/Cantido/solvent",
    types: ["com.example.one", "com.example.two"]
  )
```

You would then publish and receive those events like this:

```elixir
{:ok, event_id} = Solvent.publish("com.example.one", source: "https://github.com/Cantido/solvent")

receive do
  {:event, received_event_id} -> IO.inspect(event_id)
end
```

## The Event Store

Events are not given directly to subscriber functions.
Instead, only the event's type and ID are given, and you must fetch the event yourself.
Solvent was designed this way to minimize the amount of data being copied between processes, which would slow things down.
You can interact with the event store with the `Solvent.EventStore` module.
For the most part, you will be using the `Solvent.EventStore.fetch/1` function to get an event.

```elixir
{:ok, event} = Solvent.EventStore.fetch(event_id)
```

The event store also keeps track of event acknowledgements.

<!-- livebook:{"branch_parent_index":2} -->

## Acknowledging an Event

In order for the event store to stay small and quickly-searchable,
the event store requires that events be acknowledged once the subscriber is done processing.
The event store keeps track of acknolwedgements,
and deletes the event once all subscribers have responded.
Acknowledge events using the `Solvent.EventStore.ack/2` function.

```elixir
Solvent.EventStore.ack(event_id, sub_id)
```

## Module subscribers

Solvent allows you to subscribe modules to the event bus as well, which gives you some extra tooling and useful defaults.
To get started, `use` the `Solvent.Subscriber` module.

The example below is a subscriber that prints messages contained in events.

```elixir
defmodule MyGreetingSubscriber do
  use Solvent.Subscriber,
    source: "https://github.com/Cantido/solvent",
    types: ["com.example.user.created"]

  def handle_event(_type, event_id) do
    {:ok, event} = Solvent.EventStore.fetch(event_id)
    IO.puts("Hello, #{event.data}!")
  end
end
```

Then you can subscribe this module anywhere, like your application's `start/2` function.

```elixir
Solvent.subscribe(MyGreetingSubscriber)
```

And publish to them like normal

```elixir
{:ok, greeting_event_id} = Solvent.publish("com.example.user.created", data: "Rosa")
```

Some features of module subscribers:

* The function is subscribed with its module name as the subscriber ID (this can be overridden by providing an `:id` option to the `use` statement)
* `Solvent.EventStore.ack/2` is automatically called once the `handle_event/2` function returns (this can be disabled using the `auto_ack?: false` option)

## Event data and the CloudEvents spec

Events in Solvent follow the [CloudEvents specification](https://github.com/cloudevents/spec). This specification is a project of the Cloud Native Computing Foundation that aims describe event data in a common way. By adhering to this specification, Solvent events can be transmitted over any channel that has a CloudEvents binding defined for it. There are also other Elixir libraries that work with CloudEvents.

<!-- livebook:{"break_markdown":true} -->

Solvent uses structs from the [`cloudevents_ex`](https://github.com/kevinbader/cloudevents-ex) Elixir library to represent events.
Struct creation is wrapped by `Solvent.Event.new/2`, which sets some defaults, like a UUID, and the current time.

```elixir
event = Solvent.Event.new("com.example.event.created")
```

You can specify any of the CloudEvents keys when publishing an event.

```elixir
{:ok, event_id} =
  Solvent.publish(
    "com.example.cloudevent.published",
    id: "my specific ID",
    source: "Livebook",
    subject: "getting-started.md",
    datacontenttype: "application/json",
    data: ~s({"foo":"bar"}),
    extensions: %{
      correlationid: "a correlation ID",
      causationid: "a causation ID"
    }
  )

{:ok, event} = Solvent.EventStore.fetch(event_id)
```

`Solvent.publish/1` accepts a `Cloudevents` struct, so you can create events before publishing them

```elixir
Solvent.Event.new(
  "com.example.event.published",
  data: <<1, 2, 3, 4, 5>>
)
|> then(fn event ->
  %{event | extensions: %{correlationid: "1", causationid: "2"}}
end)
|> Solvent.publish()
```

## Summary

That's the extent of the Solvent event bus.
This is what you should have gotten from this guide:

* Subscribe functions or modules to events with `Solvent.subscribe/2`
* Publish them with `Solvent.publish/2`
* Subscribers are called with the event type and event ID as arguments
* Subscribers must fetch the event struct themselves, if they want it
* Subscribers must call `Solvent.EventStore.ack/2`; modules that `use Solvent.Subscriber` do this automatically
