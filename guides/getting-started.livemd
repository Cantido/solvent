<!-- vim: set syntax=markdown: -->

# Getting Started with Solvent

```elixir
Mix.install([:solvent])
```

## Introduction

Solvent is an event bus. It was designed to be extremely easy to use. There's no supervision hierarchy to set up, and no configuration required. You don't even need to `import` or `use` any modules if you don't want to.

## Basic PubSub

At its core, Solvent stores and invokes function calls. Use `Solvent.subscribe/2` to subscribe a function call. The only other required value is a filter expression.

Then, `Solvent.publish/1` will publish an event to trigger it. Running the example below in Livebook will create a subscriber that sends a message back to us, which we then receive and print. It should print "Hello, world!"

```elixir
parent = self()

{:ok, sub_id} =
  Solvent.subscribe([exact: [type: "com.example.event.published"]], fn _type, _event_id ->
    send(parent, {:greeting, "Hello, World!"})
  end)

{:ok, event_id} = Solvent.publish("com.example.event.published")

receive do
  {:greeting, text} -> IO.puts(text)
end
```

When an event is published, Solvent searches through all registered listener functions and invokes the functions with filters that match the event. This all happens in an isolated `Task`, so publishing an event is very fast. Subscriber functions themselves run inside their own `Task`, so they are completely isolated from one another.

Solvent also sets some Logger metadata for every subscriber process:

* `:solvent_subscriber_id` - the ID of the subscriber being executed
* `:solvent_event_source` - the source of the event that triggered this subscriber
* `:solvent_event_id` - the ID of the event that triggered this subscriber
* `:solvent_event_type` - the type field of the event that triggered this subscriber

To use this metadata, configure `:logger`:

<!-- livebook:{"force_markdown":true} -->

```elixir
config :logger, :console,
  metadata: [
    :solvent_event_type
  ]
```
## Filter Expressions

Solvent matches events using [CloudEvents subscription filters](https://github.com/cloudevents/spec/blob/main/subscriptions/spec.md#324-filters).
When translated to Elixir, these filter expressions are just keyword lists, and can be nested.
A filter expression starts as a keyword list of the filter dialect with a list of filter properties, like this:

```elixir
[filter_dialect: [filter_property_1: "value 1", filter_property_2: "value 2"]]
```

The filter you may find yourself using the most is the `exact` filter, which matches all given properties to an event's attributes.
For example, this filter will only return events that have a `type` value of `"com.example.event"` and a `source` value of `"myapp"`:

```elixir
[exact: [type: "com.example.event", source: "myapp"]]
```

Two other filters take a list of event properties: `prefix`, which selects events whose values start with a certain string, and `suffix`, which selects events whose values end with a certain string.

See the [CloudEvents subscription filter spec](https://github.com/cloudevents/spec/blob/main/subscriptions/spec.md#324-filters) for details on all possible filters.
Note that Solvent does not yet support the `sql` filter dialect.

## The Event Store

Events are not given directly to subscriber functions. Instead, only the event's type and ID are given, and you must fetch the event yourself. Solvent was designed this way to minimize the amount of data being copied between processes, which would slow things down. You can interact with the event store with the `Solvent.EventStore` module. For the most part, you will be using the `Solvent.EventStore.fetch/1` function to get an event.

```elixir
{:ok, event} = Solvent.EventStore.fetch(event_id)
```

The event store also keeps track of event acknowledgements.

<!-- livebook:{"branch_parent_index":2} -->

## Acknowledging an Event

In order for the event store to stay small and quickly-searchable, the event store requires that events be acknowledged once the subscriber is done processing. The event store keeps track of acknolwedgements, and deletes the event once all subscribers have responded. Acknowledge events using the `Solvent.EventStore.ack/2` function.

```elixir
Solvent.EventStore.ack(event_id, sub_id)
```

## Module subscribers

Subscribing functions to the event bus is straightforward, but it can be disorganized. Solvent allows you to subscribe modules to the event bus as well, which gives you some extra tooling and useful defaults. To get started, `use` the `Solvent.Subscriber` module. You must also provide the `:match_type` option, which can be either a single event type or a list of event types.

The example below is a subscriber that expects each event to contain a PID in its `:data` field, and sends a greeting to that PID.

```elixir
defmodule MyGreetingSubscriber do
  use Solvent.Subscriber,
    filter: [exact: [type: "com.example.greeting.needed"]]

  def handle_event(_type, event_id) do
    {:ok, event} = Solvent.EventStore.fetch(event_id)
    send(event.data, "Hello, I'm a module subscriber!")
  end
end
```

Then you can subscribe this module anywhere, like your application's `start/2` function.

```elixir
Solvent.subscribe(MyGreetingSubscriber)
```

And publish to them like normal

```elixir
{:ok, event_id} = Solvent.publish("com.example.greeting.needed", data: self())

receive do
  greeting -> IO.puts(greeting)
end
```

Some features of module subscribers:

* The function is subscribed with its module name as the subscriber ID
* `Solvent.EventStore.ack/2` is automatically called once the `handle_event/2` function returns

## Event data and the CloudEvents spec

Events in Solvent follow the [CloudEvents specification](https://github.com/cloudevents/spec). This specification is a project of the Cloud Native Computing Foundation that aims describe event data in a common way. By adhering to this specification, Solvent events can be transmitted over any channel that has a CloudEvents binding defined for it. There are also other Elixir libraries that work with CloudEvents.

<!-- livebook:{"break_markdown":true} -->

A `Solvent.Event` struct contains all of the CloudEvents fields, and some are given reasonable defaults if you do not provide a value. See the [`Solvent.Event` hexdocs](https://hexdocs.pm/solvent/Solvent.Event.html) for details on these fields and their defaults.

```elixir
event = Solvent.Event.new("com.example.event.created")
```

You can specify any of the CloudEvents keys when publishing an event.

```elixir
{:ok, event_id} =
  Solvent.publish(
    "com.example.cloudevent.published",
    id: "my specific ID",
    source: "Livebook",
    subject: "getting-started.md",
    datacontenttype: "application/json",
    data: ~s({"foo":"bar"}),
    extensions: %{
      correlationid: "a correlation ID",
      causationid: "a causation ID"
    }
  )

{:ok, event} = Solvent.EventStore.fetch(event_id)
```

`Solvent.publish/1` accepts a `Solvent.Event` struct, so you can create events before publishing them

```elixir
Solvent.Event.new(
  "com.example.event.published",
  data: <<1, 2, 3, 4, 5>>
)
|> then(fn event ->
  %{event | extensions: %{correlationid: "1", causationid: "2"}}
end)
|> Solvent.publish()
```

## Summary

That's the extent of the Solvent event bus. This is what you should have gotten from this guide:

* Subscribe functions or modules to events with `Solvent.subscribe/2`
* Publish them with `Solvent.publish/2`
* Subscribers are called with the event type and event ID as arguments
* Subscribed functions and modules must fetch the event struct themselves, if they want it
* Subscriber functions must call `Solvent.EventStore.ack/2`; modules do this automatically
